#RATS C:

#Standard random number generators should not be used to generate randomness used for security reasons. For security sensitive randomness a crytographic randomness generator that provides sufficient entropy should be used.
randdesc=Predictability;SFP--1;CWE-340

#Double check that your buffer is as big as you specify. When using functions that accept a number n of bytes to copy, such as strncpy, be aware that if the dest buffer size = n it may not NULL-terminate the string.
bufbig=;SFP-8;CWE-120

#Check buffer boundaries if calling this function in a loop and make sure you are not in danger of writing past the allocated space.
bufloop=;SFP-8;CWE-119

#Truncate all input strings to a reasonable length before passing them to this function
bufreasonable=;SFP-8;CWE-119

#Many calls for generating temporary file names are insecure (susceptible to race conditions). Use a securely generated file name, for example, by pulling 64 bits of randomness from /dev/random, base 64 encoding it and using that as a file suffix.
tmpfile=;SFP-20;CWE-367

#DNS results can easily be forged by an attacker (or arbitrarily set to large values, etc), and should not be trusted
dns=;SFP-29;CWE-247

#Buffer size must be _MAX_PATH+1 or larger for this function to be safe
pathbuf=;SFP-9;CWE-785

#LoadLibrary will search several places for a library if no path is specified, allowing trojan DLL's to be inserted elsewhere even if the intended DLL is correctly protected from overwriting. Make sure to specify the full path
dllload=Tainted Input;SFP--1;CWE-114

#GetExtensionVersion() is called by IIS in the system's security context.  Be very careful what you do here, as you are basically suid root for the machine. If you are calling the function rather than implementing it, howabout *not* calling it in the system's security context if possible?
iis_extension=;SFP--1;CWE-250

#GetTempPath() may return the current directory or the windows directory. Be careful what you place in these locations.  Important files may be overwritten, and trojan DLL's may be dropped in these  locations. Never use a user-input filename when writing to a location given by GetTempPath().
w32tmppath=;SFP-16;CWE-73

#Many program execution commands under Windows will search the path for a program if you do not explicitly specify a full path to the  file. This can allow trojans to be executed instead.  Also, be sure to specify a file extension, since otherwise multiple extensions will be tried by the operating system, providing another opportunity for trojans
w32exec=;SFP-16;CWE-73

#While this _exec variant does not search the path for a program (good!), it will run .com files before .exe files and the like. Make sure to specify a file extension
w32execnop=;SFP-16;CWE-73

#This function does not properly handle non-NULL terminated strings.  This does not result in exploitable code, but can lead to access violations.
accessv=;SFP-11;CWE-170

#Impersonation functions return error codes when they fail.  These error codes must be checked otherwise code could be run with extra privileges when an impersonation has failed
w32impers=;SFP-4;CWE-252

#This function can throw exceptions in low memory conditions.  Use InitialCriticalSectionAndSpinCount instead
w32crit=;SFP-4;CWE-248


#Check to be sure that the format string passed as argument %d to this function call does not come from an untrusted source that could have added formatting characters that the code is not prepared to handle.
formatArg=;SFP-24;CWE-134

#Check to be sure that argument %d passed to this function call will not copy more data than can be handled, resulting in a buffer overflow
srcBufArg=;SFP-8;CWE-120

#Check to be sure that the non-constant format string passed as argument %d to this function call does not come from an untrusted source that could have added formatting characters that the code is not prepared to handle
fsproblem=;SFP-24;CWE-134

#Argument %d to this function call should be checked to ensure that it does not come from an untrusted source without first verifying that it contains nothing dangerous.
inputproblem=;SFP-25;CWE-20

#A potential TOCTOU (Time Of Check, Time Of Use) vulnerability exists. This is the first line where a check has occured.
raceConditionUse=;SFP-20;CWE-367

#A potential race condition vulnerability exists here.  Normally a call to this function is vulnerable only when a match check precedes it.  No check was detected, however one could still exist that could not be detected
staticlocalbuffer=;SFP-8;CWE-121

#Extra care should be taken to ensure that character arrays that are allocated on the stack are used safely.  They are prime targets for buffer overflow attacks.
staticglobalbuffer=;SFP-8;CWE-120

#A function call is not being made here, but a reference is being made to a name that is normally a vulnerable function.  It could be being assigned as a pointer to function.
reference=;SFP-3;CWE-676

#Do not use a variable that has been derived from untrusted sources within a backtick.  Doing so could allow an attacker to execute arbitrary python code.
pythonBacktick=;SFP-25;CWE-454

#The backtick will act just like an call to exec(), so care should be exercised that the string being backtick evaluated does not come from an untrusted source.
otherBacktick=;SFP-24;CWE-95

#Unknown!?!?
none=;SFP--1;CWE--1

#Reminder: Do not forget to chdir() to an appropriate directory before calling chroot()!
chroot=;SFP-17;CWE-243

#Gets is unsafe!! No bounds checking is performed, buffer is easily overflowable by user. Use fgets(buf, size, stdin) instead.
gets=;SFP-3;CWE-676

#Environment variables are highly untrustable input. They may be of any length, and contain any data. Do not make any assumptions regarding content or length. If at all possible avoid using them, and if it is necessary, sanitize them and truncate them to a reasonable length.
getEnv=;SFP-25;CWE-15

#The last argument is the number of wide chars, not the number of bytes.  Getting this wrong can cause a buffer overflow since you will indicate that the buffer is twice the size it actually is.  Don't forget about NULL termination.
multiByteToWideChar=;SFP-10;CWE-135

#Be sure the destination buffer is at least MAXPATHLEN big. This function may still internally overflow a static buffer, try to avoid using it. If you must, check the size the path your pass in is no longer than MAXPATHLEN
realPath=;SFP-9;CWE-785

#cin is unsafe.  No bounds checking is performed.  Buffer is easily overflowable by user.
cin=;SFP-3;CWE-676

#The results of this call are easy to forge.
getLogin=;SFP-3;CWE-676

#This may be forgable.  Whether it is or not, even the man page recommends against using this.
cuserid=;SFP-3;CWE-676

#The results are easy for an attacker to forge, and not reliable.
ttyname=;SFP-3;CWE-676

#When setting signal handlers, do not use the same function to handle multiple signals. There exists the possibility a race condition will result if 2 or more different signals are sent to the process at nearly the same time. Also, when writing signal handlers, it is best to do as little as possible in them. The best strategy is to use the signal handler to set a flag, that another part of the program tests and performs the appropriate action(s) when it is set.
signals=;SFP-19;CWE-364

#Don't use on memory intended to be secure, because the old structure will not be zeroed out.
realloc=;SFP-23;CWE-244

#Remember that sensitive data get copied on fork.  For example, a random number generator's internal state will get duplicated, and the child may start outputting identical number streams.
fork=;SFP-23;CWE-214

#Some implementations may be broken.  Additionally, Remember that sensitive data get copied on fork.  For example, a random number generator's internal state will get duplicated, and the child may start outputting identical number streams.  Use fork() instead.
vfork=;SFP-23;CWE-214

#If the third argument, pDacl, is NULL there is no protection from attack.  As an example, an attacker could set a Deny All to Everyone ACE on such an object.
setSecurityDescriptorDacl=Access Control;SFP--1;CWE-279

#Consider using strlcat() instead
strncat=;SFP-3;CWE-676

#umask() can easily be used to create files with unsafe priviledges.  It should be set to restrictive values.
umask=AccessControl;SFP--1;CWE-279

#This function does not set the inheritance bits in the Access Controle Entry, making it vulnerable.
addAccessAllowedAce=;SFP-3;CWE-676

#When using this function, it is important to be sure that the string being passed in does not contain relative path elements (../ for example), or a null, which may cause underlying C calls to behave in ways you do not expect. This is especially important if the string is in any way constructed from a user supplied value."
taintedfileop=;SFP-16;CWE-23

#The filehandle argument should not be derived from user input. Doing so could allow arbitrary filehandles to have operations carried out on them
fcntl=;SFP-24;CWE-99

#The second argument specifiying the packed address to bind to, should not be derived from user input. If the address is derived from user input, it is possible for a malicious user to cause the socket to be bound to an address of their choice.
bind=;SFP-24;CWE-99



#RATS PHP

#Arguments 1, 2, 4 and 5 of this function may be passed to an external program. (Usually sendmail). Under Windows, they will be passed to a remote email server. If these values are derived from user input, make sure they are properly formatted and contain no unexpected characters or extra data.
mail=;SFP-24;CWE-77

#This function literally leaks memory. Are you sure you meant to use this
leak=;SFP-38;CWE-401

#Reminder: Do not forget to chdir() to an appropriate directory before calling chroot()
phpChroot=;SFP-17;CWE-243

#The results of this call are easy to forge.
posix_getlogin=;SFP-3;CWE-676

#The results are easy for an attacker to forge, and not reliable.
posix_ttyname=;SFP-3;CWE-676



#RATS OPENSSL

#Allow the function to dynamically allocate the buffer. If you insist on a fixed buffer, then double check that your buffer is as big as you specify.
avoidbuf=;SFP-8;CWE-119

#Does the memory need to be cleaned if moved? Use re[m]alloc_clean instead
cleanrealloc=;SFP-23;CWE-244

#Does the memory need to be cleaned before freeing?
cleanfree=;SFP-23;CWE-244

#Use ERR_error_string_n() instead
stringn=;SFP-3;CWE-676

#make sure the buffer is EVP_MAX_MD_SIZE
mdlen=;SFP-8;CWE-120

#make sure the output buffer is either at least one block less one byte bigger than the input, or that you are sure inputs are always multiples of the block size, and the output buffer is as big as the input.
enclen=;SFP-8;CWE-120

#make sure the output buffer is four thirds the size of the input buffer (precisely out=((in+2)/3)*4 where the division is truncated.
encodelen=;SFP-8;CWE-120

#Use strlcpy/strlcat instead of strncpy/strncat
usel=;SFP-8;CWE-120



#RATS RUBY

#Ruby safe level 2 disables this function as it could be potentially dangerous.  Verify this function is being used in a safe manner.
rubysafelevel=;SFP-3;CWE-676

#Verify variable is properly validated from tainted input.
untaint=;SFP-25;CWE-20

#Unchecked user input could allow director traversal attacks.
send_files=;SFP-16;CWE-22

#Unknown
rubySystem=;SFP--1;CWE--1

#Make sure user data is not passed to exec.
exec=;SFP-24;CWE-77

#This method allows I/O access outside of the application.  All I/O should be validated.
open=;SFP-25;CWE-20

#Use of params, verify all user values are checked before using.  Never pass params directly to a new object i.e. Object.new(params[:user])
params=;SFP-24;CWE-99


#Unknown
chmod_R=;SFP-3;CWE-676

#Unknown
chown_R=;SFP-3;CWE-676

#Unknown
ln_s=;SFP-3;CWE-676

#Unknown
mkdir_p=;SFP-3;CWE-676

#Unknown
mkpath=;SFP-3;CWE-676

#Unknown
touch=;SFP-3;CWE-676

#Unchecked user input could all exectuion of system commands.
popen=;SFP-25;CWE-20

#Unchecked user input could all loading of rouge scripts.
load=;SFP-27;CWE-545

#Make sure this function is not being used for any security related tasks.
rand=Predictability;SFP--1;CWE-340
