##
#
#http://sourceforge.net/apps/trac/cppcheck/wiki/ErrorMessages
#
##


############################ Need cwes and sfps ##############################################################

duplicateExpression=;SFP--1;CWE-710
unsignedPositive=;SFP--1;CWE-710
missingInclude=;SFP--1;CWE-710

#(sizeArgumentAsChar, possible error) The size argument is given as a char constant
sizeArgumentAsChar=;SFP-1;CWE-195

#(virtualDestructor, error) Class Base which is inherited by class Derived does not have a virtual destructor
virtualDestructor=;SFP--1;CWE-710

#(operatorEqToSelf, possible style) 'operator=' should check for assignment to self
operatorEqToSelfElement='#' should check for assignment to self
operatorEqToSelf=;SFP--1;CWE-710

#(functionConst, style) The function 'class::function' can be const
functionConstElement=The function '#' can be const
functionConst=;SFP--1;CWE-710

#(mismatchSize, error) The given size sz is mismatching
mismatchSizeElement=The given size # is mismatching
mismatchSize=Memory Managemant;SFP--1;CWE-131

#(udivError, error) Unsigned division. The result will be wrong.
udivError=;SFP-1;CWE-195

#(variableScope, style) The scope of the variable varname can be reduced
variableScopeElement=The scope of the variable # can be reduced
variableScope=;SFP--1;CWE-710

#(constStatement, style) Redundant code: Found a statement that begins with type constant
constStatement=;SFP--1;CWE-710

#(syntaxError, error) Invalid number of character ( ) when these macros are defined: .
syntaxErrorElement=when these macros are defined: '#'
syntaxError=;SFP--1;CWE-710

#(stlIfStrFind, possible style) Suspicious condition. string::find will return 0 if the string is found at position 0. If this is what you want to check then string::compare is a faster alternative because it doesn't scan through the string.
stlIfStrFind=;SFP--1;CWE-710

#(stlSize, possible style) Use list.empty() instead of list.size() to guarantee fast code. size() can take linear time but empty() is guaranteed to take constant time.
stlSize=;SFP--1;CWE-710

#(stlBoundries, error) container range check should use != and not &lt; since the order of the pointers isn't guaranteed
stlBoundries=;SFP--1;CWE-710

#(erase, error) Dangerous iterator usage. After erase the iterator is invalid so dereferencing it or comparing it with another iterator is invalid.
erase=;SFP--1;CWE-710

#(invalidIterator, error) After push_back|push_front|insert, the iterator 'iterator' may be invalid
invalidIteratorElement=After push_back|push_front|insert, the iterator '#' may be invalid
invalidIterator=;SFP--1;CWE-710

#(invalidPointer, error) Invalid pointer 'pointer' after push_back / push_front
invalidPointerElement=Invalid pointer '#' after push_back / push_front
invalidPointer=;SFP--1;CWE-710

#(strPlusChar, error) Unusual pointer arithmetic
strPlusChar=;SFP-1;CWE-468

#(postIncrementDecrement, possible style) Pre-Incrementing variable 'varname' is preferred to Post-Incrementing
postIncrementDecrementElement=Pre-Incrementing variable '#' is preferred to Post-Incrementing
postIncrementDecrement=;SFP--1;CWE-710

#(iterators, error) Same iterator is used with both container1 and container2
iterators=;SFP--1;CWE-710

#(mismatchingContainers, error) mismatching containers
mismatchingContainers=;SFP--1;CWE-710

#(eraseDereference, error) Dereferenced iterator 'iter' has been erased
eraseDereferenceElement=Dereferenced iterator '#' has been erased
eraseDereference=;SFP--1;CWE-710


####################################################################################################################


#unreadVariable
unreadVariable=;SFP-2;CWE-563

#unassignedVariable
unassignedVariable=;SFP-1;CWE-457

#(autoVariables, error) Wrong assignment of an auto-variable to an effective parameter of a function
autoVariables=;SFP-1;CWE-562

#(returnLocalVariable, error) Returning pointer to local array variable
returnLocalVariable=;SFP-1;CWE-562

#(returnReference, error) Returning reference to auto variable
returnReference=;SFP-1;CWE-562

#(returnTempReference, error) Returning reference to temporary
returnTempReference=;SFP-1;CWE-562

#(returnAutocstr, error) Returning pointer to auto variable
returnAutocstr=;SFP-1;CWE-562

#(returnTempPointer, error) Returning pointer to temporary
returnTempPointer=;SFP-1;CWE-562

#(arrayIndexOutOfBounds, error) Array index out of bounds
arrayIndexOutOfBounds=;SFP-8;CWE-118

#(bufferAccessOutOfBounds, error) Buffer access out-of-bounds: buffer
bufferAccessOutOfBounds=;SFP-8;CWE-120
bufferAccessOutOfBoundsElement=Buffer access out-of-bounds: #

#(dangerousStdCin, possible error) Dangerous usage of std::cin, possible buffer overrun
dangerousStdCin=;SFP-3;CWE-676
dangerousStdCinElement=Dangerous usage of #, possible buffer overrun

#(strncatUsage, possible error) Dangerous usage of strncat. Tip: the 3rd parameter means maximum number of characters to append
strncatUsage=;SFP-3;CWE-676
strncatUsageElement=Dangerous usage of #. Tip: the 3rd parameter means maximum number of characters to append

#(outOfBounds, error) index is out of bounds
outOfBounds=;SFP-8;CWE-118

#(terminateStrncpy, style) After a strncpy() the buffer should be zero-terminated
terminateStrncpy=;SFP-11;CWE-170

#(noConstructor, style) The class 'classname' has no constructor. Member variables not initialized.
noConstructor=;SFP--1;CWE-710
noConstructorElement=The class '#' has no constructor. Member variables not initialized.

#(uninitVar, style) Member variable not initialized in the constructor 'classname::varname'
uninitvar=;SFP--1;CWE-710
uninitVarElement=Member variable not initialized in the constructor '#'

#(operatorEqVarError, possible style) Member variable 'classname::' is not assigned a value in 'classname::operator='
operatorEqVarErrorElement=Member variable '#' is not assigned a value in
operatorEqVarError=;SFP--1;CWE-710

#(unusedPrivateFunction, style) Unused private function 'classname::funcname'
unusedPrivateFunctionElement=Unused private function '#'
unusedPrivateFunction=;SFP-2;CWE-561

#(memsetClass, error) Using 'memfunc' on class
memsetClassElement=Using '#' on class
memsetClass=;SFP--1;CWE-710

#(memsetStruct, error) Using 'memfunc' on struct that contains a 'std::classname'
memsetStructElement=Using '#' on struct that contains a 'std::classname'
memsetStruct=;SFP--1;CWE-710

#(operatorEq, style) 'operator=' should return something
operatorEq=;SFP--1;CWE-710
operatorEqElement='#' should return something

#(thisSubtraction, possible style) Suspicious pointer subtraction
thisSubtraction=;SFP--1;CWE-710

#(operatorEqRetRefThis, style) 'operator=' should return reference to self
operatorEq=;SFP--1;CWE-710
operatorEqRetRefThisElement='#' should return reference to self

#(dangerousFunctionmktemp, style) Found 'mktemp'. You should use 'mkstemp' instead
dangerousFunctionmktemp=;SFP-16;CWE-73
dangerousFunctionmktempElement=Found '#'. You should use 'mkstemp' instead

#(dangerousFunctiongets, style) Found 'gets'. You should use 'fgets' instead
dangerousFunctiongets=;SFP-3;CWE-676
dangerousFunctiongetsElement=Found '#'. You should use 'fgets' instead

#(dangerousFunctionscanf, style) Found 'scanf'. You should use 'fgets' instead
dangerousFunctionscanf=;SFP-3;CWE-676
dangerousFunctionscanfElement=Found '#'. You should use 'fgets' instead

#(exceptThrowInDestructor, style) Throwing exception in destructor
exceptThrowInDestructor=;SFP-38;CWE-401

#(exceptNew, style) Upon exception there is memory leak: p
exceptNewElement=Upon exception there is memory leak: #
exceptNew=;SFP-38;CWE-401

#(exceptRealloc, style) Upon exception p becomes a dead pointer
exceptRealloc=;SFP-38;CWE-401
exceptReallocElement=Upon exception # becomes a dead pointer

#(exceptDeallocThrow, error) Throwing exception in invalid state, p points at deallocated memory
exceptDeallocThrow=;SFP-7;CWE-416
exceptDeallocThrowElement=Throwing exception in invalid state, # points at deallocated memory

#(memleak, error) Memory leak: varname
memleak=Resource Management=;SFP-38;CWE-401
memleakElement=Memory leak: #

#(resourceLeak, error) Resource leak: varname
resourceLeak=;SFP-14;CWE-404
resourceLeakElement=Resource leak: #

#(deallocDealloc, error) Deallocating a deallocated pointer: varname
deallocDealloc=;SFP-12;CWE-415
deallocDeallocElement=Deallocating a deallocated pointer: #

#(deallocuse, error) Dereferencing 'varname' after it is deallocated / released
deallocuse=;SFP-7;CWE-416
deallocuseElement=Dereferencing '#' after it is deallocated / released

#(mismatchAllocDealloc, error) Mismatching allocation and deallocation: varname
mismatchAllocDealloc=;SFP-12;CWE-762
mismatchAllocDeallocElement=Mismatching allocation and deallocation: #

#(sprintfOverlappingData, error) Undefined behaviour: varname is used wrong in call to sprintf or snprintf. Quote: If copying takes place between objects that overlap as a result of a call to sprintf() or snprintf(), the results are undefined.
sprintfOverlappingData=Other.Design;SFP--1;CWE-682
sprintfOverlappingDataElement=Undefined behaviour: # is used wrong in call to sprintf or snprintf

#(nullPointer, error) Possible null pointer dereference: pointer
nullPointer=;SFP-7;CWE-476
nullPointerElement=Possible null pointer dereference: #

#(uninitstring, error) Dangerous usage of 'varname' (strncpy doesn't always 0-terminate it)
uninitstringElement=Dangerous usage of '#' (strncpy doesn't always 0-terminate it)
uninitstring=;SFP-11;CWE-170

#(uninitdata, error) Data is allocated but not initialized: varname
uninitdata=;SFP-1;CWE-456
uninitdataElement=Data is allocated but not initialized: #

#(uninitvar, error) Uninitialized variable: varname
uninitvar=;SFP-1;CWE-457
uninitvarElement=Uninitialized variable: #
Passing value to () leads to undefined result
#(zerodiv, error) Division by zero
zerodiv=;SFP-1;CWE-369

#(wrongmathcall, error) Passing value to () leads to undefined result
wrongmathcall=;SFP--1;CWE-687
wrongmathcallElement=Passing value to # leads to undefined result

#(cstyleCast, style) C-style pointer casting
cstyleCast=;SFP-1;CWE-704

#(redundantIfDelete0, style) Redundant condition. It is safe to deallocate a NULL pointer
redundantIfDelete0=;SFP--1;CWE-710

#(redundantIfRemove, style) Redundant condition. The remove function in the STL will not do anything if element doesn't exist
redundantIfRemove=;SFP--1;CWE-710

#(dangerousUsageStrtol, error) Invalid radix in call to strtol or strtoul. Must be 0 or 2-36
dangerousUsageStrtol=Other.Design;SFP--1;CWE-682

#(udivWarning, possible style) Division with signed and unsigned operators
udivWarning=Other.Design;SFP--1;CWE-682

#(unusedStructMember, style) struct or union member 'structname::variable' is never used
unusedStructMember=;SFP-2;CWE-563
unusedStructMemberElement=struct or union member '#' is never used

#(passedByValue, style) Function parameter 'parametername' is passed by value. It could be passed by reference instead.
passedByValueElement=Function parameter '#' is passed by value. It could be passed by reference instead.
passedByValue=;SFP-1;CWE-686

#(charArrayIndex, style) Warning - using char variable as array index
charArrayIndex=;SFP-1;CWE-195

#(charBitOp, style) Warning - using char variable in bit operation
charBitOp=Other.Design;SFP--1;CWE-682

#(conditionAlwaysTrueFalse, style) Condition is always true/false
conditionAlwaysTrueFalse=;SFP--1;CWE-398

#(stlOutOfBounds, error) When i==foo.size(), foo[i] is out of bounds
stlOutOfBounds=;SFP-8;CWE-125

#(stlIfFind, style) Suspicious condition. The result of find is an iterator, but it is not properly checked.
stlIfFind=;SFP--1;CWE-710

#(unusedFunction, style) The function 'funcName' is never used
unusedFunction=;SFP-2;CWE-561
unusedFunctionElement=The function '#' is never used

###### Added for Cppcheck 1.60.1 #######

#(useClosedFile, error) Used file that is not opened.
useClosedFile=;SFP-15;CWE-672

#(returnAddressOfAutoVariable, error) Address of an auto-variable returned.
returnAddressOfAutoVariable=;SFP-7;CWE-416

#(doubleFree, error) Memory pointed to by 'varname' is freed twice.
doubleFree=;SFP-12;CWE-415
doubleFreeElement=Memory pointed to by '#' is freed twice.

#(autovarInvalidDeallocation, error) Deallocation of an auto-variable results in undefined behaviour.
autovarInvalidDeallocation=;SFP-12;CWE-590

#(assignBoolToPointer, error) Boolean value assigned to pointer.
assignBoolToPointer=;SFP-1;CWE-587

#(boostForeachError, error) BOOST_FOREACH caches the end() iterator. It's undefined behavior if you modify the container inside.
boostForeachError=;SFP--1;CWE-758

#(coutCerrMisusage, error) Invalid usage of output stream: '<< std::cout'.
coutCerrMisusage=;SFP-24;CWE-134
doubleFreeElement=Invalid usage of output stream: '<< std::#'.

#(deallocret, error) Returning/dereferencing 'p' after it is deallocated / released
deallocret=;SFP-7;CWE-416
deallocretElement=Returning/dereferencing '#' after it is deallocated / released

#(fflushOnInputStream, error) fflush() called on input stream 'stdin' results in undefined behaviour.
fflushOnInputStream=;SFP--1;CWE-758
fflushOnInputStreamElement=fflush() called on input stream '#' results in undefined behaviour.

#(insecureCmdLineArgs, error) Buffer overrun possible for long command line arguments.
insecureCmdLineArgs=;SFP-3;CWE-676

#(invalidIterator1, error) Invalid iterator: iterator
invalidIterator1=;SFP--1;CWE-398
invalidIterator1Element=Invalid iterator: #.

#(invalidIterator2, error) After push_back|push_front|insert(), the iterator 'iterator' may be invalid.
invalidIterator2=;SFP--1;CWE-398
invalidIterator2Element=After push_back|push_front|insert(), the iterator '#' may be invalid.

#(IOWithoutPositioning, error) Read and write operations without a call to a positioning function (fseek, fsetpos or rewind) or fflush in between result in undefined behaviour.
IOWithoutPositioning=;SFP-1;CWE-475

#(leakNoVarFunctionCall, error) Allocation with funcName, funcName doesn't release it.
leakNoVarFunctionCall=;SFP-14;CWE-773

#(mallocOnClassError, error) Memory for class instance allocated with malloc(), but class contains a std::string.
mallocOnClassError=;SFP--1;CWE-758

#(memleakOnRealloc, error) Common realloc mistake: 'varname' nulled but not freed upon failure
memleakOnRealloc=;SFP-14;CWE-771
memleakOnReallocElement=Common realloc mistake: '#' nulled but not freed upon failure

#(negativeIndex, error) Array index -1 is out of bounds.
negativeIndex=;SFP-8;CWE-118
negativeIndexElement=Array index # is out of bounds.

#(readWriteOnlyFile, error) Read operation on a file that was opened only for writing.
readWriteOnlyFile=;SFP--1;CWE-398

#(returnAddressOfFunctionParameter, error) Address of function parameter 'parameter' returned.
returnAddressOfFunctionParameter=;SFP--1;CWE-398
returnAddressOfFunctionParameterElement=Address of function parameter '#' returned.

#(returnReference, error) Reference to auto variable returned.
returnReference=;SFP-1;CWE-562

#(returnTempReference, error) Reference to temporary returned.
returnTempReference=;SFP-1;CWE-562

#(shiftNegative, error) Shifting by a negative value.
shiftNegative=;SFP--1;CWE-398

#(sizeofwithsilentarraypointer, error) Using 'sizeof' on array given as function argument returns size of a pointer.
sizeofwithsilentarraypointer=;SFP-1;CWE-475

#(stlcstr, error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.
stlcstr=;SFP--1;CWE-758

#(tooBigSleepTime, error) The argument of usleep must be less than 1000000.
tooBigSleepTime=;SFP--1;CWE-398

#(uninitstring, error) Dangerous usage of 'varname' (strncpy doesn't always null-terminate it).
uninitstring=;SFP-11;CWE-170
uninitstringElement=Dangerous usage of '#' (strncpy doesn't always null-terminate it).

#(uninitStructMember, error) Uninitialized struct member: a.b
uninitStructMember=;SFP-1;CWE-457
uninitStructMemberElement=Uninitialized struct member: #

#(unusedScopedObject, error) Instance of 'varname' object is destroyed immediately.
unusedScopedObject=;SFP--1;CWE-710
unusedScopedObjectElement=Instance of '#' object is destroyed immediately.

#(useAutoPointerArray, error) Object pointed by an 'auto_ptr' is destroyed using operator 'delete'. You should not use 'auto_ptr' for pointers obtained with operator 'new[]'.
useAutoPointerArray=;SFP-1;CWE-475

#(useAutoPointerContainer, error) You can randomly lose access to pointers if you store 'auto_ptr' pointers in an STL container.
useAutoPointerContainer=;SFP-7;CWE-476

#(writeOutsideBufferSize, error) Writing 1 bytes outside buffer size.
writeOutsideBufferSize=;SFP--1;CWE-131

#(writeReadOnlyFile, error) Write operation on a file that was opened only for reading.
writeReadOnlyFile=;SFP--1;CWE-398

#(wrongcctypecall, error) Passing value value to funname() causes undefined behavior which may lead to a crash.
wrongcctypecall=;SFP--1;CWE-758
wrongcctypecallElement=Passing value value to #() causes undefined behavior which may lead to a crash.

#(wrongmathcall, error) Passing value '#' to #() leads to undefined result.
wrongmathcall=;SFP--1;CWE-687
wrongmathcallElement=Passing value '#' to #() leads to undefined result.

#(wrongPipeParameterSize, error) Buffer 'varname' must have size of 2 integers if used as parameter of pipe().
wrongPipeParameterSize=;SFP-1;CWE-686
wrongPipeParameterSizeElement=Buffer '#' must have size of 2 integers if used as parameter of pipe().

#(wrongPrintfScanfArgNum, error) printf format string has 3 parameters but only 2 are given.
wrongPrintfScanfArgNum=;SFP-1;CWE-685

#(cppcheckError, error) Analysis failed. If the code is valid then please report this failure.
cppcheckError=;SFP--1;CWE-1

#(preprocessorErrorDirective, error) #error message
preprocessorErrorDirective=;SFP--1;CWE-1
