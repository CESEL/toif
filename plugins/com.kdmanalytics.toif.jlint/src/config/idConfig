Loop .* invocation of synchronized method .* can cause deadlock;sync_loop
Loop .* invocation of method .* forms the loop in class dependency graph;loop
Lock .* is requested while holding lock .*;lock
Method wait\(\) can be invoked with monitor of other object locked;wait
Holding .* lock\(s\).*;locklist
Call sequence to method .* can cause deadlock in wait\(\);wait_path
Synchronized method .* is overridden by non-synchronized method of derived class .*;nosync
Method .* can be called from different threads and is not synchronized;concurrent_call
Field .* of class .* can be accessed from different threads and is not volatile;concurrent_access
Method .* implementing 'Runnable' interface is not synchronized;run_nosync
Value of lock .* is changed outside synchronization or constructor;lock_assign
Value of lock .* is changed while \(potentially\) owning it;lock_assign2
Method .* is called without synchronizing on .*;wait_nosync
Method .* is not overridden by method with the same name of derived class .*;not_overridden
hashCode\(\) was overridden but not equals\(\);equals_not_overridden
equals\(\) was overridden but not hashCode\(\);hashcode_not_overridden
Component .* in class .* shadows one in base class .*;field_redefined
Local variable .* shadows component of class .*;shadow_local
Method finalize\(\) doesn't call super.finalize\(\);super_finalize
Method .* can be invoked with NULL as .* parameter and this parameter is used without check for NULL;null_param
Value of referenced variable .* may be NULL;null_var
NULL reference can be used;null_ptr
Zero operand for .* operation;zero_operand
Result of operation .* is always 0;zero_result
Shift .* with count .* than .*;shift_count
Shift .* count range .*;shift_range
Range of expression value has no intersection with .* type domain;conversion
Data can be lost as a result of truncation to .*;truncation
Maybe type cast is not correctly applied;overflow
Comparison always produces the same result;same_result
Compared expressions can be equal only when both of them are 0;disjoint_mask
Reminder always equal to the first operand;no_effect
Comparison of short with char;short_char_cmp
Compare strings as object references;string_cmp
Inequality comparison can be replaced with equality comparison;weak_cmp
Switch case constant .* can't be produced by switch expression;incomp_case
Array length .* is less than zero;neg_len
Array length .* may be less than zero;maybe_neg_len
Index .* is out of array bounds;bad_index
Index .* may be out of array bounds;maybe_bad_index
